## Etat actuel

La **Core API** fonctionne en local, mais :

- Pas beaucoup de tests **grandeur nature**
- Pas encore de vrais **retours utilisateurs**
- Pas *(encore ?)* intégrée dans la version *legacy*
- Pas utilisable avec des **jobs**
    - => Réservé à la **Public API** ?

## Echéances (court terme) {.smaller}

**Public API** pour recoller à l'état d'esprit de la version *legacy*

- Intégrer des appels à la **Core API** dans **OSEkit** *legacy*
    - Difficile à **nettoyer**
    - [Pour]{.primary}/[Contre]{.secondary} à peser
- Construire une **Public API** plus simple, calquée sur **OSEkit** *legacy*
    - [Entrées]{.primary}/[Sorties]{.secondary} à *re-*définir *?*
    - Permettrait de simplifier les **dépendances du projet**
    - Intégration à la logique actuelle des **jobs**
- Ecrire une **documentation** détaillée *(Que faire de la documentation Sphinx existante ?)*

## Echéances (*plus* long terme) {.smaller}

- Intégration de **données auxiliaires** :
    - **Jointure** entre les différents héritages de `BaseData` pensés en amont (classe `Event`)
    - Réflexion à avoir sur le niveau de **généralisation** des [classes]{.primary} de **données auxiliaires**
- Classes d'[analyse]{.primary}/[traitement]{.secondary} qui **composent** avec les héritages de `BaseData`
- Communication avec **APLOSE**
    - Génération de spectrogrammes **à la volée**
    - **Annotations** : [Données OSEkit]{.primary} (héritées de `BaseData`, donc d'`Event`) qui peuvent être **croisées** à [tout autre type de donnéés]{.secondary}