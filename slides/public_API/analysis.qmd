## Analysis {auto-animate=true}

L'**API** contient un flag `Analysis`:

```{.python}
from OSmOSE.public_api.dataset import Analysis

analysis = Analysis.AUDIO | Analysis.MATRIX | Analysis.SPECTROGRAM
```

**=>** Lorsque l'analyse est lancée, seuls les flags présents seront inclus :

- `AUDIO` : [Exporte]{.primary} l'**audio reshapé**
- `MATRIX` : [Calcule]{.primary}/[Exporte]{.secondary} les **matrices du spectre**
- `SPECTROGRAM` : [Calcule]{.primary}/[Exporte]{.secondary} les **spectrogrammes**

## Analysis {auto-animate=true}

On a besoin d'une `ShortTimeFFT` si le flag contient une **analyse spectrale** :

```{.python code-line-numbers="1,9"}
from scipy.signal import ShortTimeFFT
from scipy.signal.windows import hamming

mfft = 1_024
win = hamming(mfft)
fs = 48_000
overlap = .5
hop = round(len(win)*(1-overlap))
sft = ShortTimeFFT(win=win,hop=hop,fs=fs)
```

## Analysis {auto-animate=true}

Et on **lance l'analyse** :

```{.python code-line-numbers="3,4,11|1,3,5-9,11|3,10,11"}
from pandas import Timestamp, Timedelta

dataset.run_analysis(
    analysis = analysis,
    begin = Timestamp("2022-09-25 17:30:00+0000"),
    end = Timestamp("2022-09-25 17:35:00+0000"),
    data_duration = Timedelta(seconds = 10),
    sample_rate = fs,    
    fft=sft,
    name = "lf_full"
)
```

## Analysis {auto-animate=true}

Autre example : **spectrogrammes seuls** :

```{.python code-line-numbers="3,4,11|1,3,5-9,11|3,10,11"}
from pandas import Timestamp, Timedelta

dataset.run_analysis(
    analysis = Analysis.SPECTROGRAM,
    begin = Timestamp("2022-09-25 18:00:00+0000"),
    end = Timestamp("2022-09-25 18:01:00+0000"),
    data_duration = Timedelta(seconds = 10),
    sample_rate = fs,    
    fft=sft,
    name = "spectro_only"
)
```