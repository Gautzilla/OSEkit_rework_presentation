## Spectre

Pour [calculer]{.primary} / [tracer]{.secondary} le **spectre** d'un `AudioData` :

- Objet `SpectroData` construit à partir :
    - d'un `AudioData`
    - d'une `scipy.signal.ShortTimeFFT`

## Spectre {auto-animate="true" auto-animate-id="sd-value"}

```{.python code-line-numbers="1-2,5-10|3,12"}
from scipy.signal import ShortTimeFFT
from scipy.signal.windows import hamming
from OSmOSE.core_api.spectro_data import SpectroData

sft = ShortTimeFFT(
    win=hamming(1_024),
    hop=round(1_024*(1-0.8)), 
    fs=ad.sample_rate, 
    mfft=1_024
    )

sd = SpectroData.from_audio_data(data=ad, fft=sft)
```

::: {.fragment}

**=>** L'audio n'a **toujours pas** été manipulé.

:::

## Spectre {auto-animate="true" auto-animate-id="sd-value"}

```{.python code-line-numbers="14"}
from scipy.signal import ShortTimeFFT
from scipy.signal.windows import hamming
from OSmOSE.core_api.spectro_data import SpectroData

sft = ShortTimeFFT(
    win=hamming(1_024),
    hop=round(1_024*(1-0.8)), 
    fs=ad.sample_rate, 
    mfft=1_024
    )

sd = SpectroData.from_audio_data(data=ad, fft=sft)

sx = sd.get_value()
```

**=>** Les données sont toujours [récupérées]{.primary} / [traitées]{.secondary} **à la demande**.

## Spectre {auto-animate="true" auto-animate-id="sd-value"}

```{.python code-line-numbers="16"}
from scipy.signal import ShortTimeFFT
from scipy.signal.windows import hamming
from OSmOSE.core_api.spectro_data import SpectroData

sft = ShortTimeFFT(
    win=hamming(1_024),
    hop=round(1_024*(1-0.8)), 
    fs=ad.sample_rate, 
    mfft=1_024
    )

sd = SpectroData.from_audio_data(data=ad, fft=sft)

sx = sd.get_value()

sd.write(audio_folder / "npz")
```

**=>** Les **matrices** peuvent être écrites dans des fichiers `npz`

## Spectrogramme {auto-animate="true" auto-animate-id="spectro"}

```{.python code-line-numbers="1,3-4"}
import matplotlib.pyplot as plt

sd.plot()
plt.show()
```

::: {.fragment}

**=>** Les **spectrogrammes** sont tracés sur la [figure par défaut]{.primary} de la version *legacy*.

:::

## Spectrogramme {auto-animate="true" auto-animate-id="spectro"}

```{.python}
sd.save_spectrogram(audio_folder / "spectro")
```

**=>** Les **spectrogrammes** peuvent être exportés avec la méthode `save_spectrogram()`

## Spectrogramme {auto-animate="true" auto-animate-id="spectro"}

```{.python code-line-numbers="1-2"}
fig, ax = plt.subplots(1,1)
sd.plot(ax=ax)

plt.show()
```

**=>** On peut spécifier un `Axes` sur lequel tracer le **spectrogramme**.

## Spectrogramme {auto-animate="true" auto-animate-id="spectro"}

```{.python code-line-numbers="1-4|6,8-9|11"}
sd1, sd2 = (
    SpectroData.from_audio_data(ad, sft) 
    for ad in ads.data[200:202]
    )

fig, axs = plt.subplots(2,1)

sd1.plot(ax=axs[0])
sd2.plot(ax=axs[1])

plt.show()
```

**=>** Exemple pour **2 spectrogrammes** consécutifs sur **une même figure**.