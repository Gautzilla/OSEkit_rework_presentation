## LTAS {auto-animate="true" auto-animate-id="ltas"}

```{.python code-line-numbers="1-2|4-9|11"}
ltas_data = AudioData.from_files(files=afs)
ltas_data.sample_rate = 48_000

ltas_sft = ShortTimeFFT(
    win=hamming(4_096),
    hop=round(4_096*(1-0.8)), 
    fs=ltas_data.sample_rate, 
    mfft=4_096
    )

ltas_sd = SpectroData.from_audio_data(ltas_data, ltas_sft)
```

::: {.fragment}

**=>** Calcul de [spectre]{.primary} sur une [longue durée]{.secondary}.

:::

## LTAS {auto-animate="true" auto-animate-id="ltas"}

```{.python code-line-numbers="13"}
ltas_data = AudioData.from_files(files=afs)
ltas_data.sample_rate = 48_000

ltas_sft = ShortTimeFFT(
    win=hamming(4_096),
    hop=round(4_096*(1-0.8)), 
    fs=ltas_data.sample_rate, 
    mfft=4_096
    )

ltas_sd = SpectroData.from_audio_data(ltas_data, ltas_sft)

print(f"{ltas_sd.nb_bytes/1e9:_} Gb")
```

**=>** La matrice seule représente ~`17 Gb` de données...

## LTAS {auto-animate="true" auto-animate-id="ltasData"}

```{.python code-line-numbers="1,3,6|4|5"}
from OSmOSE.data.ltas_data import LTASData

ltas = LTASData.from_spectro_data(
    spectro_data=ltas_sd, 
    nb_time_bins=3000
    )
```

**=>** L'objet `LTASData` est un `SpectroData` dont la matrice `Sx` est calculée **récursivement** *(par **DFS**)*

## LTAS {auto-animate="true" auto-animate-id="ltasData"}

```{.python code-line-numbers="1,3-6"}
from OSmOSE.data.ltas_data import LTASData

ltas = LTASData.from_spectro_data(
    spectro_data=ltas_sd, 
    nb_time_bins=3000
    )
```

::: {.r-stack}

![](media\LTAS_DFS\1.svg){.fragment .fade-in-then-out fig-align=center}

![](media\LTAS_DFS\2.svg){.fragment .fade-in-then-out fig-align=center}

![](media\LTAS_DFS\3.svg){.fragment .fade-in-then-out fig-align=center}

![](media\LTAS_DFS\4.svg){.fragment .fade-in-then-out fig-align=center}

![](media\LTAS_DFS\5.svg){.fragment .fade-in-then-out fig-align=center}

![](media\LTAS_DFS\6.svg){.fragment .fade-in-then-out fig-align=center}

![](media\LTAS_DFS\7.svg){.fragment .fade-in-then-out fig-align=center}

![](media\LTAS_DFS\8.svg){.fragment .fade-in-then-out fig-align=center}

![](media\LTAS_DFS\9.svg){.fragment fig-align=center}

:::

## LTAS {auto-animate="true" auto-animate-id="ltasData"}

```{.python code-line-numbers="8|10-11"}
from OSmOSE.data.ltas_data import LTASData

ltas = LTASData.from_spectro_data(
    spectro_data=ltas_sd, 
    nb_time_bins=3000
    )

ltas_sx = ltas.get_value()

ltas.plot(sx = ltas_sx)
plt.show()
```

::: {.fragment}

**=>** Pour *n'importe quel* **SpectroData**, on peut passer la `sx` en paramètre de `plot()` et `write()` pour ne pas avoir à la recalculer.

:::