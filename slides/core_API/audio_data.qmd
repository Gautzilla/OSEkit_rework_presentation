## Utilisation {auto-animate=true}

### AudioData

```{.python code-line-numbers="1|4-5,7|2,4,6-7" style="margin-bottom:50px;"}
from OSmOSE.data.audio_data import AudioData
from pandas import Timedelta

ad = AudioData.from_files(
    files=[af],
    end=af.begin + Timedelta(seconds=2)
    )
```

::: {.fragment}
**=>** Seules les **métadonnées** du fichier ont été lues.
:::

## Utilisation {auto-animate=true}

### AudioData (un seul fichier)

```{.python code-line-numbers="9" style="margin-bottom:50px;"}
from OSmOSE.data.audio_data import AudioData
from pandas import Timedelta

ad = AudioData.from_files(
    files=[af],
    end=af.begin + Timedelta(seconds=2)
    )

vs = ad.get_value()
```

**=>** On ne lit l'audio **que sur demande**.

## Utilisation {auto-animate=true}

### AudioData (plusieurs fichiers)

```{.python code-line-numbers="1-4|6" style="margin-bottom:50px;"}
afs = [
    AudioFile(f, strptime_format="%y%m%d%H%M%S") 
    for f in af.path.parent.glob("*.wav")
    ]

ad = AudioData.from_files(files=afs)
```

- **Un seul** [AudioData]{.primary} est créé
- **Un** [AudioItem]{.primary} est créé **par** [AudioFile]{.secondary}
- **Un** [AudioItem]{.primary} est créé pour combler un vide entre deux [AudioFile]{.secondary}


## Utilisation {auto-animate=true}

### AudioData (plusieurs fichiers)

```{.python code-line-numbers="6-7|9" style="margin-bottom:50px;"}
afs = [
    AudioFile(f, strptime_format="%y%m%d%H%M%S") 
    for f in af.path.parent.glob("*.wav")
    ]

begin = afs[1].begin - Timedelta(seconds = 1)
end = afs[1].begin + Timedelta(seconds = 1)

ad = AudioData.from_files(files=afs, begin=begin, end=end)
```

::: {.fragment}

**=>** Création simple d'objets `AudioData` sans se soucier des [fichiers audio]{.primary}.

:::

## Utilisation {auto-animate=true}

### AudioData (plusieurs fichiers)

```{.python code-line-numbers="11" style="margin-bottom:50px;"}
afs = [
    AudioFile(f, strptime_format="%y%m%d%H%M%S") 
    for f in af.path.parent.glob("*.wav")
    ]

begin = afs[1].begin - Timedelta(seconds = 1)
end = afs[1].begin + Timedelta(seconds = 1)

ad = AudioData.from_files(files=afs, begin=begin, end=end)

vs = ad.get_value()
```

**=>** La donnée est récupérée **sur demande** dans chaque fichier concerné par la requête.


## Utilisation {auto-animate=true}

### AudioData (rééchantillonnage)

```{.python}
ad.sample_rate = 96_000
```

::: {.fragment}

**=>** Seul l'**objet** `AudioData` est modifié *(on ne touche pas au fichier)*

:::

## Utilisation {auto-animate=true}

### AudioData (rééchantillonnage)

```{.python code-line-numbers="3"}
ad.sample_rate = 96_000

vs = ad.get_value()
```

**=>** L'audio est **rééchantillonné à la demande** *(et rien n'a été écrit en dur)*.

## Utilisation {auto-animate=true}

### AudioData (rééchantillonnage)

```{.python code-line-numbers="3"}
ad.sample_rate = 96_000

ad.write(af.path.parent / "output")
```

**=> Ecriture** de l'`AudioData` :

:::{style="font-size:80%"}

- **Lecture** de l'audio :
    - [Ouverture]{.primary}/[fermeture]{.secondary} dynamique des fichiers
    - [Lecture]{.primary} des échantillons compris entre deux [timestamps]{.secondary}
- **Rééchantillonnage** de l'audio *(si nécessaire)*
- **Ecriture** du fichier

:::