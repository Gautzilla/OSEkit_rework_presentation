---
title: OSEkit
subtitle: présentation de la nouvelle API
format: 
    revealjs:
        incremental: true
        transition: slide
        theme: [default, theme.scss]
filters:
    - pyodide
---

# OSmOSE

{{< include slides/osmose.qmd >}}

# OSEkit

{{< include slides/objectif.qmd >}}

{{< include slides/utilisation_osekit.qmd >}}

# Public API (legacy)

{{< include slides/legacy_API/presentation.qmd >}}

{{< include slides/legacy_API/build.qmd >}}

{{< include slides/legacy_API/initialize.qmd >}}

{{< include slides/legacy_API/generate.qmd >}}

# Core API (prototype)

{{< include slides/core_API/presentation.qmd >}}

{{< include slides/core_API/architecture.qmd >}}

{{< include slides/core_API/audio_file.qmd >}}

{{< include slides/core_API/audio_data.qmd >}}

## Spectre

Pour [calculer]{.primary} / [tracer]{.secondary} le **spectre** d'un `AudioData` :

- Objet `SpectroData` construit à partir :
    - d'un `AudioData`
    - d'une `scipy.signal.ShortTimeFFT`

## Spectre {auto-animate="true" auto-animate-id="sd-value"}

```{.python code-line-numbers="1-2,5-10|3,12"}
from scipy.signal import ShortTimeFFT
from scipy.signal.windows import hamming
from OSmOSE.data.spectro_data import SpectroData

sft = ShortTimeFFT(
    win=hamming(1_024),
    hop=round(1_024*(1-0.8)), 
    fs=ad.sample_rate, 
    mfft=1_024
    )

sd = SpectroData.from_audio_data(data=ad, fft=sft)
```

::: {.fragment}

**=>** L'audio n'a **toujours pas** été manipulé.

:::

## Spectre {auto-animate="true" auto-animate-id="sd-value"}

```{.python code-line-numbers="14"}
from scipy.signal import ShortTimeFFT
from scipy.signal.windows import hamming
from OSmOSE.data.spectro_data import SpectroData

sft = ShortTimeFFT(
    win=hamming(1_024),
    hop=round(1_024*(1-0.8)), 
    fs=ad.sample_rate, 
    mfft=1_024
    )

sd = SpectroData.from_audio_data(data=ad, fft=sft)

sx = sd.get_value()
```

**=>** Les données sont toujours [récupérées]{.primary} / [traitées]{.secondary} **à la demande**.

## Spectrogramme {auto-animate="true" auto-animate-id="spectro"}

```{.python}
import matplotlib.pyplot as plt

sd.plot()
plt.show()
```

::: {.fragment}

**=>** Les **spectrogrammes** sont tracés sur la [figure par défaut]{.primary} de la version *legacy*.

:::

## Spectrogramme {auto-animate="true" auto-animate-id="spectro"}

```{.python code-line-numbers="1,3"}
fig, ax = plt.subplots(1,1)

sd.plot(ax=ax)
plt.show()
```

**=>** On peut spécifier un `Axes` sur lequel tracer le **spectrogramme**.

## Spectrogramme {auto-animate="true" auto-animate-id="spectro"}

```{.python code-line-numbers="1-7|9-11|12"}
ad2 = AudioData.from_files(
    files=afs, 
    begin=ad.end, 
    end=ad.end+ad.duration
    )
ad2.sample_rate = ad.sample_rate
sd2 = SpectroData.from_audio_data(data=ad2, fft=sft)

fig, axs = plt.subplots(2,1)
sd.plot(ax=axs[0])
sd2.plot(ax=axs[1])
plt.show()
```

**=>** Exemple pour **2 spectrogrammes** consécutifs sur **une même figure**.